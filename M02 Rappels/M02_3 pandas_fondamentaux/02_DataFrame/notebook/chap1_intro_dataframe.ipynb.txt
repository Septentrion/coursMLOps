{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DataFrame\n",
    "\n",
    "## Définition\n",
    "\n",
    "Un Dataframe est semblable à un dictionnaire dont les clés sont les noms des colonnes (columns) et les valeurs des séries. Vous pouvez également définir des index spécifiques.\n",
    "\n",
    "```python\n",
    "temperatures = np.array([\n",
    "    [25, 28.5, 30],\n",
    "    [33, 29, 35],\n",
    "    [38, 39, 44],\n",
    "])\n",
    "\n",
    "# Def des index et colonnes\n",
    "temperatures_df = pd.DataFrame(\n",
    "    temperatures,\n",
    "    index = ['Bordeaux', 'Paris', 'Lille'],\n",
    "    columns = ['2001', '2002', '2003']\n",
    ")\n",
    "```\n",
    "\n",
    "L'objet **temperatures_df** est un tableau (DataFrame) à deux dimensions :\n",
    "\n",
    "```txt\n",
    "\t        2001\t2002\t2003\n",
    "Bordeaux    25.0\t28.5\t30.0\n",
    "Paris\t    33.0\t29.0\t35.0\n",
    "Lille\t    38.0\t39.0\t44.0\n",
    "```\n",
    "\n",
    "Voici quelques fonctions élémentaires pour commencer sur les DataFrames :\n",
    "\n",
    "- df.info() : information sur le DataFrame.\n",
    "- df.head(2) : Deux premières lignes du DataFrame.\n",
    "- df.head(), df.tail() : les 5 premières ou les 5 dernières (par défaut df.head(n = 5) et df.tail(n=5))\n",
    "- df.columns : noms des colonnes : Index(['2001', '2002', '2003'], dtype='object').\n",
    "- df.columns.values : Noms des colonnes dans un array Numpy.\n",
    "- df.index : Noms des lignes : Index(['Bordeaux', 'Paris', 'Lille'], dtype='object').\n",
    "- df.index.values : Noms des lignes dans un array Numpy.\n",
    "- df.values : DataFrame dans un array 2d Numpy.\n",
    "- df.describe() : statistiques sur les colonnes numériques (moyenne, écart-type, ...)\n",
    "- df.shape : donne les dimensions du DataFrame.\n",
    "\n",
    "## Construire un DataFrame avec un dictionnaire\n",
    "\n",
    "Voici comment vous pouvez construire un **DataFrame** facilement à partir d'un dictionnaire en Python, les clés sont les noms des colonnes :\n",
    "\n",
    "```python\n",
    "import pandas as pd\n",
    "\n",
    "dataset = {\n",
    "    'name':['john','mary','peter','jeff','bill','lisa','jose'],\n",
    "    'age':[23,78,22,19,45,33,20],\n",
    "    'gender':['M','F','M','M','M','F','M'],\n",
    "    'city':[\n",
    "        'Paris','Lille',\n",
    "        'Paris','Lille','Paris',\n",
    "        'Bordeaux','Bordeaux'\n",
    "    ],\n",
    "    'num_children':[3,0,2,4,3,1,5],\n",
    "    'num_pet':[5,1,0,5,2,2,3]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(dataset)\n",
    "df.head(7)\n",
    "```\n",
    "\n",
    "Ici on ne précise pas d'index pour le DataFrame, Pandas utilisera par défaut un index numérique :\n",
    "\n",
    "![dataframe](images/df_001.png)\n",
    "\n",
    "## Sélectionner des valeurs dans le DataFrame\n",
    "\n",
    "### Méthode [] : df[]\n",
    "\n",
    "```python\n",
    "# Chaque clé est le nom d'une colonne\n",
    "# Chaque liste Python contient les valeurs de la colonne\n",
    "data = {\n",
    "    'city': ['Lille', 'Paris', 'Lyon', 'Marseille', 'Aubenas'],\n",
    "    'year': [2000, 2001, 2002, 2001, 2020],\n",
    "    'pop': [0.232, 2.141, 0.513, 0.861, 0.012]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data, index=['59', '75', '69', '13', '07'])\n",
    "\n",
    "print(df)\n",
    "\n",
    "\"\"\"\n",
    "        city  year    pop\n",
    "59      Lille  2000  0.232\n",
    "75      Paris  2001  2.141\n",
    "69       Lyon  2002  0.513\n",
    "13  Marseille  2001  0.861\n",
    "07    Aubenas  2020  0.012\n",
    "\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "Pour accéder à la première colonne \"city\" on pourra utiliser la syntaxe suivante :\n",
    "\n",
    "```python\n",
    "df['city']\n",
    "\n",
    "\"\"\"\n",
    "59        Lille\n",
    "75        Paris\n",
    "69         Lyon\n",
    "13    Marseille\n",
    "07      Aubenas\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "Si on souhaite accéder à plusieurs colonnes, par exemple ici à deux colonnes en même temps, on écrira :\n",
    "\n",
    "```python\n",
    "df[ ['city', 'year'] ]\n",
    "\"\"\"\n",
    "    city\tyear\n",
    "59\tLille\t2000\n",
    "75\tParis\t2001\n",
    "69\tLyon\t2002\n",
    "13\tMarseille\t2001\n",
    "07\tAubenas\t2020\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "Vous pouvez utiliser la notion de mask avec un DataFrame, ici on sélectionnera les villes ayant plus de 500 000 habitants :\n",
    "\n",
    "```python\n",
    "df[ df['pop'] > 0.5 ]\n",
    "\"\"\"\n",
    "        city  year    pop\n",
    "75      Paris  2001  2.141\n",
    "69       Lyon  2002  0.513\n",
    "13  Marseille  2001  0.861\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "Attention le slicing numérique sert uniquement à sélectionner des lignes :\n",
    "\n",
    "```python\n",
    "df[0:2]\n",
    "\"\"\"\n",
    "     city  year    pop\n",
    "59  Lille  2000  0.232\n",
    "75  Paris  2001  2.141\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "### Méthode loc : df.loc[row] et df.loc[row, column]\n",
    "\n",
    "La méthode .loc utilise les étiquettes de ligne et de colonne : loc[ row, column]\n",
    "\n",
    "```python\n",
    "df.loc['59']\n",
    "\"\"\"\n",
    "city    Lille\n",
    "year     2000\n",
    "pop     0.232\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "Vous pouvez à l'aide de cette dernière syntaxe faire du slicing sur les index :\n",
    "\n",
    "```python\n",
    "df.loc['75':'07']\n",
    "\n",
    "\"\"\"\n",
    "        city  year    pop\n",
    "75      Paris  2001  2.141\n",
    "69       Lyon  2002  0.513\n",
    "13  Marseille  2001  0.861\n",
    "07    Aubenas  2020  0.012\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "On peut également sélectionner ligne(s) et colonne(s) :\n",
    "\n",
    "```python\n",
    "\n",
    "df.loc['75':'07', 'pop']\n",
    "\n",
    "\"\"\"\n",
    "75    2.141\n",
    "69    0.513\n",
    "13    0.861\n",
    "07    0.012\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "Un autre exemple de sélection :\n",
    "\n",
    "```python\n",
    "df.loc['75':'07', 'city': ]\n",
    "```\n",
    "\n",
    "### Méthode iloc : iloc[row, column] row et column indexés seulement numériquement\n",
    "\n",
    "```python\n",
    "# row, column\n",
    "df.iloc[1:, 1:]\n",
    "\"\"\"\n",
    "    year    pop\n",
    "75  2001  2.141\n",
    "69  2002  0.513\n",
    "13  2001  0.861\n",
    "07  2020  0.012\n",
    "\"\"\"\n",
    "```\n",
    "\n",
    "## Exercice création de DataFrame\n",
    "\n",
    "Créez les DataFrames suivants :\n",
    "\n",
    "1. DataFrame **fruits1**\n",
    "\n",
    "```txt\n",
    "---------------------------------\n",
    "|   |   Rapsberry | Cherries    |\n",
    "---------------------------------\n",
    "| 0 |   30        |  20         |\n",
    "---------------------------------\n",
    "```\n",
    "\n",
    "2. DataFrame **fruits2**\n",
    "\n",
    "```txt\n",
    "------------------------------------\n",
    "|       |   fig       |     wine    |\n",
    "------------------------------------\n",
    "| 2020  |   130       |  120        |\n",
    "------------------------------------\n",
    "| 2019  |   309       |  290        |\n",
    "------------------------------------\n",
    "```\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
