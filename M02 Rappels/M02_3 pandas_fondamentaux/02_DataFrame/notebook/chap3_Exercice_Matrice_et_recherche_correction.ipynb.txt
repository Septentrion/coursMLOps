{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Corrections\n",
    "\n",
    "```python\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "data = [ \n",
    "    [13,  54,  23,  23,  62,  29,  53,  15,  54 , 67],\n",
    "    [13,  54,  23,  23,  62,  29,  53,  15,  54,  67],\n",
    "    [98,  36,  34,  40,  13,  92,  41,  61 , 94,  62],\n",
    "    [33,  87,  46,  44,  82,  87,  11,  76,  76,  21],\n",
    "    [56,  16 , 13,  91,  64,  13,  77,  44,  44,  27],\n",
    "    [15 , 87,  20,  50,  53,  48,  39,  38,  91,  32],\n",
    "    [93,  48,  28,  27,  50 , 55 , 28 , 38  ,78 , 85],\n",
    "    [76,  58 , 26  ,89 , 88  ,71 , 97 , 80,  42,  52],\n",
    "    [38,  98,  55,  61,  75,  82 , 37,  64,  87,  83],\n",
    "    [24,  53,  16,  84,  82,  13,  18,  18,  82,  51],\n",
    "  ]\n",
    "\n",
    "A = pd.DataFrame(data, index=list(\"abcdefghij\"), columns=list(\"abcdefghij\".upper()))\n",
    "A.drop_duplicates(inplace=True)\n",
    "\n",
    "# 2. compter les occurences du DataFrame\n",
    "\n",
    "# Première solution un peu technique ...\n",
    "\n",
    "stat = {}\n",
    "# on itère sur le nom des colonnes\n",
    "for column in A:\n",
    "    # On parcourt les valeurs unique par colonne\n",
    "    for unique in A[column].unique():\n",
    "        # On compte de manière globale sur tout le DataFrame\n",
    "        # Donc si on a déjà compté la valeur dans stat on ne le refait pas\n",
    "        if unique not in stat:\n",
    "            # (A == unique).sum() compte par colonne il faut donc l'appliquer\n",
    "            # une deuxième fois\n",
    "            stat[unique] = (A == unique).sum().sum()\n",
    "            \n",
    "print(stat)\n",
    "\n",
    "# Une autre solution plus simple\n",
    "\n",
    "stat = {}\n",
    "\n",
    "for index, row in A.iterrows():\n",
    "    for number in row:\n",
    "        # la première fois pour number on initialise stat à 0\n",
    "        # pour pouvoir compter le nombre d'occurence\n",
    "        if not in stat:\n",
    "            stat[number] = 0\n",
    "        stat[number] += 1\n",
    "\n",
    "# 3. Somme des nombres pairs de chaque ligne\n",
    "\n",
    "A[A % 2  == 0].sum(axis=1)\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A    1\n",
      "B    0\n",
      "C    1\n",
      "D    0\n",
      "E    1\n",
      "F    2\n",
      "G    0\n",
      "H    0\n",
      "I    0\n",
      "J    0\n",
      "dtype: int64\n",
      "{11: 1, 13: 5, 15: 2, 16: 2, 18: 2, 20: 1, 21: 1, 23: 2, 24: 1, 26: 1, 27: 2, 28: 2, 29: 1, 32: 1, 33: 1, 34: 1, 36: 1, 37: 1, 38: 3, 39: 1, 40: 1, 41: 1, 42: 1, 44: 3, 46: 1, 48: 2, 50: 2, 51: 1, 52: 1, 53: 3, 54: 2, 55: 2, 56: 1, 58: 1, 61: 2, 62: 2, 64: 2, 67: 1, 71: 1, 75: 1, 76: 3, 77: 1, 78: 1, 80: 1, 82: 4, 83: 1, 84: 1, 85: 1, 87: 4, 88: 1, 89: 1, 91: 2, 92: 1, 93: 1, 94: 1, 97: 1, 98: 2}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "a    170.0\n",
       "c    456.0\n",
       "d    324.0\n",
       "e    224.0\n",
       "f    188.0\n",
       "g    270.0\n",
       "h    422.0\n",
       "i    282.0\n",
       "j    324.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "data = [ \n",
    "    [13,  54,  23,  23,  62,  29,  53,  15,  54 , 67],\n",
    "    [13,  54,  23,  23,  62,  29,  53,  15,  54,  67],\n",
    "    [98,  36,  34,  40,  13,  92,  41,  61 , 94,  62],\n",
    "    [33,  87,  46,  44,  82,  87,  11,  76,  76,  21],\n",
    "    [56,  16 , 13,  91,  64,  13,  77,  44,  44,  27],\n",
    "    [15 , 87,  20,  50,  53,  48,  39,  38,  91,  32],\n",
    "    [93,  48,  28,  27,  50 , 55 , 28 , 38  ,78 , 85],\n",
    "    [76,  58 , 26  ,89 , 88  ,71 , 97 , 80,  42,  52],\n",
    "    [38,  98,  55,  61,  75,  82 , 37,  64,  87,  83],\n",
    "    [24,  53,  16,  84,  82,  13,  18,  18,  82,  51],\n",
    "  ]\n",
    "\n",
    "A = pd.DataFrame(data, index=list(\"abcdefghij\"), columns=list(\"abcdefghij\".upper()))\n",
    "A.drop_duplicates(inplace=True)\n",
    "\n",
    "\n",
    "stat = {}\n",
    "print((A == 13).sum())\n",
    "\n",
    "# on itère sur le nom des colonnes\n",
    "for column in A:\n",
    "    # On parcourt les valeurs unique par colonne\n",
    "    for unique in A[column].unique():\n",
    "        # On compte de manière globale sur tout le DataFrame\n",
    "        # Donc si on a déjà compté la valeur dans stat on ne le refait pas\n",
    "        if unique not in stat:\n",
    "            # (A == unique).sum() compte \n",
    "            stat[unique] = (A == unique).sum().sum()\n",
    "            \n",
    "print(stat)\n",
    "\n",
    "# 3. Somme des nombres pairs de chaque ligne\n",
    "\n",
    "A[A % 2  == 0].sum(axis=1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
